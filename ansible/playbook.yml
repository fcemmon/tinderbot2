---
- name: Disable root login over SSH
  hosts: all
  gather_facts: false
  user: root

  vars:
    user: bijan
    ssh_user: root
    ssh_identity_key: "~/.ssh/id_rsa.pub"

  handlers:
    - name: restart sshd
      service: name=sshd state=restarted

  tasks:
  # - name: import secrets
  #   include_vars:
  #     file: "~/0/vault/secrets.yml"

  - name: Add identity key to authorized keys on host
    authorized_key:
      user: "{{ ssh_user }}"
      key: "{{ lookup('file', ssh_identity_key) }}"
    register: add_identity_key
    when: ssh_identity_key is defined and ssh_user is defined

  - name: Disable empty password login
    lineinfile:
      dest: "/etc/ssh/sshd_config"
      regexp: '^#?PermitEmptyPasswords'
      line: 'PermitEmptyPasswords no'
    notify: restart sshd

  - name: Disable password login
    lineinfile:
      dest: "/etc/ssh/sshd_config"
      regexp: '^(#\s*)?PasswordAuthentication '
      line: 'PasswordAuthentication no'
    when:
      - add_identity_key is succeeded
      - not add_identity_key is skipped
    notify: restart sshd

  - name: Ensure group "wheel" exists
    ansible.builtin.group:
      name: wheel
      state: present

  - name: Add user
    user:
      name: "{{ user }}"
      password: "$6$r3HOUl5i0SxHmC/B$PrpBNgPku2T7W5AUs9uXYAuv0BPCSJrS1lh6g9whan2Rg3d0C8AGZdV5xn6RXeOsRAKej64T5cPyLW.j.CO40/"
      groups: wheel

  - name: Add authorized key
    authorized_key:
      user: "{{ user }}"
      key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC9QCJvXGOu4Aq9Sg7CLvX988zvJJCUk1IsnMq9loWhYrIcCl6+vzPkrCCNpOGaUr2zvkB4BWFuugcxMzs0oF64AQNilaYxCFVQ17TveAy8Pyw3YtSYh5KtqFb0/1zwQCyZRbvl0YrkWGylm2ROXTn94Jz4WVA1znJD1QGLZnPGLRKdIxdqnVwYOKEkq7pC0MR+cdzGmrJo+I6Z7b+PuwByHuJ08zIH0YgwP1clyk/m77fbaW0VYEqqgDIsAr6oVLvMwXlLfXPCPGHrPWSpMclv8qR7M51MGHDVqYI+fVNfPQJoNi6L+DouWn1SHgYZIl43gVzfVU8R+glMUJjNkaFWSTFtgQfOK8gajI4nxJAFr915PQSXBFO2W/7ls9ijGvb3ZkNrnYJf4FNpe/9oiLGubY6juynlMbi1vY5+6mj5/UkK/qINNW2f0LPT3Li8EmK/YfYb/dzSbEt0xyCA7C5wE84FC50erBeQDgRQdUcycUUwVZMvWXO5kKTZbj0LMn8= bijan@Bijans-MacBook-Air.local"

  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'

- name: provision
  hosts: all
  tags: apt
  gather_facts: no
  remote_user: bijan
  become: yes
  vars:
    postgres_root_user: root
    postgres_root_pass: GQt5MTyVPuf9vsVWoWDT9YCn
    allow_world_readable_tmpfiles: true

  handlers:
    - name: Reboot host
      reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami

  tasks:

    - name: Update apt repo and cache on Ubuntu box
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600

    - name: Upgrade all packages on servers
      apt:
        upgrade: dist
        force_apt_get: yes
      notify: Reboot host

    - name: Install required packages
      tags: packages
      apt:
        name:
          - wget
          - python3-psycopg2
          - acl
          - ubuntu-desktop
          - xrdp
          - gcc
          - g++
          - byacc
          - git
          - build-essential
          - neovim
          - zsh
          - tmux
          - fzf
          - rbenv
          - libpq-dev

        state: latest

- hosts: all
  tags: zsh
  gather_facts: no
  roles:
    - role: gantsign.oh-my-zsh
      users:
        - username: bijan

- name: provision
  hosts: all
  tags: postgres
  gather_facts: no
  remote_user: bijan
  become: yes
  vars:
    postgres_root_user: root
    postgres_root_pass: GQt5MTyVPuf9vsVWoWDT9YCn
    allow_world_readable_tmpfiles: true

  tasks:

    - name: Set up Postgres 14 repo
      shell: |
        echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      args:
        warn: no

    - name: Install postgresql
      apt:
        name: postgresql-14
        update_cache: yes
      notify:
        - Enable Postgresql

    - name: Create a Superuser PostgreSQL database user
      become_user: postgres
      postgresql_user:
        name: '{{ postgres_root_user }}'
        password: '{{ postgres_root_pass }}'
        role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
        encrypted: yes
        state: present

  handlers:
    - name: Restart Postgresql
      systemd:
        name: postgresql
        state: restarted

    - name: Start Postgresql
      systemd:
        name: postgresql
        state: started

    - name: Stop Postgresql
      systemd:
        name: postgresql
        state: stopped

    - name: Enable Postgresql
      systemd:
        name: postgresql
        enabled: yes

#     # - name: Ensure PostgreSQL is listening on *
#     #   lineinfile:
#     #     dest: /etc/postgresql/14/main/postgresql.conf
#     #     regexp: '^listen_addresses\s*='
#     #     line: "listen_addresses='*'"
#     #     state: present
#     #   notify: Restart Postgresql
#     #
#     # - name: Add new configuration to "pg_hba.conf"
#     #   blockinfile:
#     #     dest: /etc/postgresql/14/main/pg_hba.conf
#     #     block: |
#     #       host    all             all             0.0.0.0/0                md5
#     #       host    all             all             ::/0                     md5
#     #   notify: Restart Postgresql
#     #
#     # - name: Change peer identification to trust
#     #   shell: /bin/sed -i '/^local/s/peer/trust/' /etc/postgresql/14/main/pg_hba.conf
#     #   args:
#     #     warn: no
#     #   notify: Restart Postgresql
#     #
#     #
#
    - name: Download Teamviewer
      tags: teamviewer
      get_url:
        url: https://download.teamviewer.com/download/linux/teamviewer_amd64.deb
        dest: /root
        # mode: '0440'
